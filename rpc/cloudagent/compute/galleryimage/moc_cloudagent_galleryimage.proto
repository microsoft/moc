// Copyright (c) Microsoft Corporation.
// Licensed under the Apache v2.0 license.

syntax = "proto3";
option go_package = "github.com/microsoft/moc/rpc/cloudagent/compute";
package moc.cloudagent.compute;

import "google/protobuf/wrappers.proto";
import "moc_common_common.proto";

enum GalleryImageOSType {
	UNKNOWN = 0;
	LINUX = 1;
	WINDOWS = 2;
}

message GalleryImageRequest {
	repeated GalleryImage GalleryImages = 1;
	Operation OperationType = 2;
}

message GalleryImageResponse {
	repeated GalleryImage GalleryImages = 1;
	google.protobuf.BoolValue Result = 2;
	string  Error = 3;
}

message GalleryImagePrecheckRequest {
	repeated GalleryImage GalleryImages = 1;
}

message GalleryImagePrecheckResponse {
	// The precheck result: true if the precheck criteria is passed; otherwise, false
	google.protobuf.BoolValue Result = 1;

	// The error message if the precheck is not passed; otherwise, empty string
	string Error = 2;
}

message SFSImageProperties {
	string catalogName = 1;
	string audience = 2;
	string version = 3;
	string releaseName = 4;
	string destinationDir = 5;
	uint32 parts = 6;
}
message LocalImageProperties {
	string path = 1 [(sensitive) = true];
}
message CloneImageProperties {
	string cloneSource = 1;
}
message HttpImageProperties {
	string httpURL = 1;
}
message AzureGalleryImageProperties {
	string sasURI = 1 [(sensitive) = true];
	string version = 2;
}

message GalleryImage {
	string name = 1;
	string id = 2;
	GalleryImageOSType imageOSType = 3;
	// Path of the image on the cloud
	string path = 4 [(sensitive) = true];
	Status status = 5;
	string locationName = 6;
	string publisher = 7;
	string sku = 8;
	string offer = 9;
	string containerName = 10;
	// Source of the GalleryImage from where we can copy the image from.
	string sourcePath = 11 [(sensitive) = true];
	Tags tags = 12;
	ImageSource sourceType = 13;
	HyperVGeneration hyperVGeneration = 14;
	CloudInitDataSource cloudInitDataSource = 15;
}

service GalleryImageAgent {
	rpc Invoke(GalleryImageRequest) returns (GalleryImageResponse) {}

	// Prechecks whether the system is able to create specified gallery images (but does not actually create them).
	rpc Precheck(GalleryImagePrecheckRequest) returns (GalleryImagePrecheckResponse) {}
}
