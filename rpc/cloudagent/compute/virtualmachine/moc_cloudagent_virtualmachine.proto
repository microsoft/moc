// Copyright (c) Microsoft Corporation.
// Licensed under the Apache v2.0 license.

syntax = "proto3";
option go_package = "github.com/microsoft/moc/rpc/cloudagent/compute";
package moc.cloudagent.compute;

import "google/protobuf/wrappers.proto";
import "moc_common_common.proto";
import "moc_common_computecommon.proto";

enum VMType {
	TENANT = 0;
	LOADBALANCER = 1;
	STACKEDCONTROLPLANE = 2;
}

message VirtualMachineRequest {
	repeated VirtualMachine VirtualMachines = 1;
	Operation OperationType = 2;
}

message VirtualMachineResponse {
	repeated VirtualMachine VirtualMachines = 1;
	google.protobuf.BoolValue Result = 2;
	string  Error = 3;
}

message SSHPublicKey {
	string keydata = 1 [(sensitive) = true];
}

message Disk {
	// reference to the virtual hard disk managed by storage
	string diskname = 1;
	VirtualMachineManagedDiskParameters managedDisk = 2;
}

message StorageConfiguration {
	Disk osdisk = 1;
	repeated Disk datadisks = 2;
	string imageReference = 3;
	string vmConfigContainerName = 4; // Name of the storage container that hosts the VM configuration file 
}

message NetworkInterface {
	// reference to network interface managed by network
	string networkInterfaceName = 1;
}

message NetworkConfiguration {
	repeated NetworkInterface interfaces = 1;
}

message UserConfiguration {
	string username = 1 [(sensitive) = true];
	string password = 2 [(sensitive) = true];
	UserType usertype = 3;
}

message RDPConfiguration {
	bool disableRDP = 1;
	uint32 port = 2;
}

message LinuxConfiguration {
	bool disablePasswordAuthentication = 1;
}

message WindowsConfiguration {
	bool enableAutomaticUpdates = 1;
	string timeZone = 2;
	RDPConfiguration RDPConfiguration = 3;
	WinRMConfiguration WinRMConfiguration = 4;
}

message OperatingSystemConfiguration {
	string computerName = 1;
	UserConfiguration administrator = 2;
	repeated UserConfiguration users = 3;
	string customData = 4 [(sensitive) = true];
	repeated SSHPublicKey publickeys = 5;
	OperatingSystemType ostype = 6;
	// bootstrap engine can be cloud-init, Windows answer files, ...
	OperatingSystemBootstrapEngine osBootstrapEngine = 7;
	LinuxConfiguration linuxConfiguration = 8;
	WindowsConfiguration windowsConfiguration = 9;
	ProxyConfiguration proxyConfiguration = 10;
}

message HardwareConfiguration {
	VirtualMachineSizeType VMSize = 1;
	VirtualMachineCustomSize customSize = 2;
	DynamicMemoryConfiguration dynamicMemoryConfiguration = 3;
	repeated VirtualMachineGPU virtualMachineGPUs = 4;
}

message UefiSettings {
	bool secureBootEnabled = 1;
}

message SecurityConfiguration {
	bool enableTPM = 1;
	UefiSettings uefiSettings = 2;
	SecurityType securityType = 3;
}

message AvailabilitySetReference {
	string groupName = 1;
	string name = 2;
}

message PlacementGroupReference {
	string groupName = 1;
	string name = 2;
}

message VirtualMachine {
	string name = 1;
	string id = 2;
	StorageConfiguration storage = 3;
	OperatingSystemConfiguration os = 4;
	NetworkConfiguration network = 5;
	string nodeName = 6;
	string groupName = 7;
	Status status = 8;
	string locationName = 9;
	bool disableHighAvailability = 10;
	VMType vmType = 11;
	HardwareConfiguration hardware = 12;
	repeated string allowedOwnerNodes = 13;
	PowerState powerState = 14;
	SecurityConfiguration security = 15;
	Tags tags = 16;
	GuestAgentConfiguration guestAgent = 17;
	VirtualMachineAgentInstanceView guestAgentInstanceView = 18;
	AvailabilitySetReference availabilitySet = 19;
	ZoneConfiguration zoneConfiguration = 20;
	PlacementGroupReference placementGroup = 21;
	Priority priority = 22;
}

message VirtualMachineOperationRequest {
	repeated VirtualMachine VirtualMachines = 1;
	VirtualMachineOperation OBSOLETE_OperationType = 2 [deprecated=true];
	ProviderAccessOperation OperationType = 3;
}

message VirtualMachineOperationResponse {
	repeated VirtualMachine VirtualMachines = 1;
	google.protobuf.BoolValue Result = 2;
	string  Error = 3;
}

message VirtualMachineRunCommandRequest {
	VirtualMachine VirtualMachine = 1;
	VirtualMachineRunCommandScriptSource Source = 2;
	repeated VirtualMachineRunCommandInputParameter RunCommandInputParameters = 3;
	string RunAsUser = 4 [(sensitive) = true];
	string RunAsPassword = 5 [(sensitive) = true];
}

message VirtualMachineRunCommandResponse {
	VirtualMachine VirtualMachine = 1;
	VirtualMachineRunCommandInstanceView InstanceView = 2;
}

message VirtualMachinePrecheckRequest {
	repeated VirtualMachine VirtualMachines = 1;
}

message VirtualMachinePrecheckResponse {
	// The precheck result: true if the precheck criteria is passed; otherwise, false
	google.protobuf.BoolValue Result = 1;

	// The error message if the precheck is not passed; otherwise, empty string
	string Error = 2;
}

service VirtualMachineAgent {
	rpc Invoke(VirtualMachineRequest) returns (VirtualMachineResponse) {}

	// Prechecks whether the system is able to create specified virtual machines (but does not actually create them).
	rpc Precheck(VirtualMachinePrecheckRequest) returns (VirtualMachinePrecheckResponse) {}

	rpc Operate(VirtualMachineOperationRequest) returns (VirtualMachineOperationResponse) {}
	rpc RunCommand(VirtualMachineRunCommandRequest) returns (VirtualMachineRunCommandResponse) {}
}