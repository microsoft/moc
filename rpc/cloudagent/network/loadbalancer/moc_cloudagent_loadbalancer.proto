// Copyright (c) Microsoft Corporation.
// Licensed under the Apache v2.0 license.

syntax = "proto3";
option go_package = "github.com/microsoft/moc/rpc/cloudagent/network";
package moc.cloudagent.network;

import "google/protobuf/wrappers.proto";
import "moc_common_common.proto";
import "moc_common_networkcommon.proto";

message LoadBalancerRequest {
	repeated LoadBalancer LoadBalancers = 1;
	Operation OperationType = 2;
}

message LoadBalancerResponse {
	repeated LoadBalancer LoadBalancers = 1;
	google.protobuf.BoolValue Result = 2;
	string  Error = 3;
}

message LoadBalancerPrecheckRequest {
	repeated LoadBalancer LoadBalancers = 1;
}

message LoadBalancerPrecheckResponse {
	// The precheck result: true if the precheck criteria is passed; otherwise, false
	google.protobuf.BoolValue Result = 1;

	// The error message if the precheck is not passed; otherwise, empty string
	string Error = 2;
}

message LoadbalancerInboundNatRule {
	string name = 1;
	uint32 frontendPort = 2;
	uint32 backendPort = 3;
	Protocol protocol = 4;
}

message LoadBalancingRule {
	uint32 frontendPort = 1;
	uint32 backendPort = 2;
	Protocol protocol = 3;
}

message LoadBalancer {
	string name = 1;
	string id = 2;
	string frontendIP = 3 [(sensitive) = true];
	repeated string backendpoolnames = 4;
	string networkid = 5;
	repeated LoadBalancingRule loadbalancingrules = 6;
	string nodefqdn = 7 [(sensitive) = true];
	string groupName = 8;
	string locationName = 9;
	Status status = 10;
	Tags tags = 11;
	uint32 replicationCount = 12;
	repeated LoadbalancerInboundNatRule inboundNatRules = 13;
}

service LoadBalancerAgent {
	rpc Invoke(LoadBalancerRequest) returns (LoadBalancerResponse) {}

	// Prechecks whether the system is able to create specified load balancers (but does not actually create them).
	rpc Precheck(LoadBalancerPrecheckRequest) returns (LoadBalancerPrecheckResponse) {}
}

