// Code generated by protoc-gen-go. DO NOT EDIT.
// source: moc_cloudagent_renewal.proto

package security

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RenewRequest struct {
	CSR                  *CertificateSigningRequest `protobuf:"bytes,1,opt,name=CSR,proto3" json:"CSR,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *RenewRequest) Reset()         { *m = RenewRequest{} }
func (m *RenewRequest) String() string { return proto.CompactTextString(m) }
func (*RenewRequest) ProtoMessage()    {}
func (*RenewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52a3c340b24b68aa, []int{0}
}

func (m *RenewRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RenewRequest.Unmarshal(m, b)
}
func (m *RenewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RenewRequest.Marshal(b, m, deterministic)
}
func (m *RenewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewRequest.Merge(m, src)
}
func (m *RenewRequest) XXX_Size() int {
	return xxx_messageInfo_RenewRequest.Size(m)
}
func (m *RenewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RenewRequest proto.InternalMessageInfo

func (m *RenewRequest) GetCSR() *CertificateSigningRequest {
	if m != nil {
		return m.CSR
	}
	return nil
}

type RenewResponse struct {
	Certificate          *Certificate        `protobuf:"bytes,1,opt,name=Certificate,proto3" json:"Certificate,omitempty"`
	Result               *wrappers.BoolValue `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
	Error                string              `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RenewResponse) Reset()         { *m = RenewResponse{} }
func (m *RenewResponse) String() string { return proto.CompactTextString(m) }
func (*RenewResponse) ProtoMessage()    {}
func (*RenewResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52a3c340b24b68aa, []int{1}
}

func (m *RenewResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RenewResponse.Unmarshal(m, b)
}
func (m *RenewResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RenewResponse.Marshal(b, m, deterministic)
}
func (m *RenewResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewResponse.Merge(m, src)
}
func (m *RenewResponse) XXX_Size() int {
	return xxx_messageInfo_RenewResponse.Size(m)
}
func (m *RenewResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RenewResponse proto.InternalMessageInfo

func (m *RenewResponse) GetCertificate() *Certificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *RenewResponse) GetResult() *wrappers.BoolValue {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RenewResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*RenewRequest)(nil), "moc.cloudagent.security.RenewRequest")
	proto.RegisterType((*RenewResponse)(nil), "moc.cloudagent.security.RenewResponse")
}

func init() { proto.RegisterFile("moc_cloudagent_renewal.proto", fileDescriptor_52a3c340b24b68aa) }

var fileDescriptor_52a3c340b24b68aa = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xdd, 0x4a, 0x03, 0x31,
	0x14, 0x84, 0x5d, 0x8b, 0x05, 0x53, 0x05, 0x09, 0x82, 0x65, 0x11, 0x29, 0x45, 0xa5, 0x57, 0x89,
	0xac, 0x4f, 0x60, 0xab, 0x3e, 0x40, 0x2a, 0x5e, 0x78, 0x53, 0xd2, 0x78, 0x1a, 0x03, 0xd9, 0x3d,
	0x6b, 0x7e, 0x28, 0x3e, 0x8e, 0x6f, 0x2a, 0xfb, 0x53, 0x76, 0x11, 0x8a, 0x5e, 0x1e, 0x32, 0xf3,
	0x4d, 0x66, 0xc8, 0x65, 0x8e, 0x6a, 0xa5, 0x2c, 0xc6, 0x77, 0xa9, 0xa1, 0x08, 0x2b, 0x07, 0x05,
	0x6c, 0xa5, 0x65, 0xa5, 0xc3, 0x80, 0xf4, 0x22, 0x47, 0xc5, 0xba, 0x57, 0xe6, 0x41, 0x45, 0x67,
	0xc2, 0x57, 0x7a, 0xa5, 0x11, 0xb5, 0x05, 0x5e, 0xcb, 0xd6, 0x71, 0xc3, 0xb7, 0x4e, 0x96, 0x25,
	0x38, 0xdf, 0x18, 0xd3, 0xc9, 0x2f, 0xac, 0x02, 0x17, 0xcc, 0xc6, 0x28, 0x19, 0xa0, 0x51, 0x4c,
	0x5f, 0xc8, 0x89, 0xa8, 0xb2, 0x04, 0x7c, 0x46, 0xf0, 0x81, 0x3e, 0x92, 0xc1, 0x62, 0x29, 0xc6,
	0xc9, 0x24, 0x99, 0x8d, 0xb2, 0x8c, 0xed, 0x09, 0x66, 0x8b, 0x0e, 0xb4, 0x34, 0xba, 0x30, 0x85,
	0x6e, 0x01, 0xa2, 0xb2, 0x4f, 0xbf, 0x13, 0x72, 0xda, 0x62, 0x7d, 0x89, 0x85, 0x07, 0xfa, 0x4c,
	0x46, 0x3d, 0x4f, 0xcb, 0xbf, 0xfe, 0x0f, 0x5f, 0xf4, 0x8d, 0x34, 0x23, 0x43, 0x01, 0x3e, 0xda,
	0x30, 0x3e, 0xac, 0x11, 0x29, 0x6b, 0x26, 0x60, 0xbb, 0x09, 0xd8, 0x1c, 0xd1, 0xbe, 0x4a, 0x1b,
	0x41, 0xb4, 0x4a, 0x7a, 0x4e, 0x8e, 0x9e, 0x9c, 0x43, 0x37, 0x1e, 0x4c, 0x92, 0xd9, 0xb1, 0x68,
	0x8e, 0xcc, 0xb7, 0xcd, 0xa5, 0x7d, 0xa8, 0xb2, 0xa9, 0x22, 0x67, 0xf5, 0xdd, 0x4f, 0xbb, 0xd9,
	0xfb, 0xc1, 0xfe, 0x68, 0xe9, 0xed, 0x5f, 0xb2, 0x66, 0x84, 0xe9, 0xc1, 0x3c, 0x7b, 0xbb, 0xd3,
	0x26, 0x7c, 0xc4, 0x35, 0x53, 0x98, 0xf3, 0xdc, 0x28, 0x87, 0x1e, 0x37, 0x81, 0xe7, 0xa8, 0xb8,
	0x2b, 0x15, 0xef, 0x18, 0x7c, 0xc7, 0x58, 0x0f, 0xeb, 0x6a, 0xf7, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x58, 0x81, 0xe5, 0xae, 0x24, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RenewalAgentClient is the client API for RenewalAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RenewalAgentClient interface {
	RenewCertificate(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*RenewResponse, error)
}

type renewalAgentClient struct {
	cc *grpc.ClientConn
}

func NewRenewalAgentClient(cc *grpc.ClientConn) RenewalAgentClient {
	return &renewalAgentClient{cc}
}

func (c *renewalAgentClient) RenewCertificate(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*RenewResponse, error) {
	out := new(RenewResponse)
	err := c.cc.Invoke(ctx, "/moc.cloudagent.security.RenewalAgent/RenewCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RenewalAgentServer is the server API for RenewalAgent service.
type RenewalAgentServer interface {
	RenewCertificate(context.Context, *RenewRequest) (*RenewResponse, error)
}

// UnimplementedRenewalAgentServer can be embedded to have forward compatible implementations.
type UnimplementedRenewalAgentServer struct {
}

func (*UnimplementedRenewalAgentServer) RenewCertificate(ctx context.Context, req *RenewRequest) (*RenewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewCertificate not implemented")
}

func RegisterRenewalAgentServer(s *grpc.Server, srv RenewalAgentServer) {
	s.RegisterService(&_RenewalAgent_serviceDesc, srv)
}

func _RenewalAgent_RenewCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenewalAgentServer).RenewCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moc.cloudagent.security.RenewalAgent/RenewCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenewalAgentServer).RenewCertificate(ctx, req.(*RenewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RenewalAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moc.cloudagent.security.RenewalAgent",
	HandlerType: (*RenewalAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RenewCertificate",
			Handler:    _RenewalAgent_RenewCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moc_cloudagent_renewal.proto",
}
