// Copyright (c) Microsoft Corporation.
// Licensed under the Apache v2.0 license.

syntax = "proto3";
option go_package = "github.com/microsoft/moc/rpc/common";

package moc;
import "google/protobuf/descriptor.proto";

enum Operation {
	GET = 0;
	POST = 1;
	DELETE = 2;
	UPDATE = 3;
	IMPORT = 4;
	EXPORT = 5;
	VALIDATE = 6;
}

enum ProvisionState {
	UNKNOWN = 0;
	CREATING = 1;
	CREATED = 2;
	CREATE_FAILED = 3;
	DELETING = 4;
	DELETE_FAILED = 5;
	DELETED = 6;
	UPDATING = 7;
	UPDATE_FAILED = 8;
	UPDATED = 9;
	PROVISIONING = 10;
	PROVISIONED = 11;
	PROVISION_FAILED = 12;
	DEPROVISIONING = 13;
	DEPROVISIONED = 14;
	DEPROVISION_FAILED = 15;
	DELETE_PENDING = 16;
	IMPORTING = 17;
	IMPORTED = 18;
	IMPORT_FAILED = 19;
}

enum HighAvailabilityState {
	UNKNOWN_HA_STATE = 0;
	STABLE = 1;
	PENDING = 2;
}

enum HealthState {
	NOTKNOWN = 0;
	OK = 1;
	WARNING = 2;
	CRITICAL = 3;
	// The entity went missing from the platform
	MISSING = 4;
	DEGRADED = 5;
	// The entity went missing from the agent
	NOTFOUND = 6;
}

message Error {
	string Message = 1;
	int32 Code = 2;
	string Parameters = 3;
}

message ProvisionStatus {
	ProvisionState currentState = 1;
	ProvisionState previousState = 2;
}

message DownloadStatus {
	int64 progressPercentage = 1;
	int64 downloadSizeInBytes = 2;
	int64 fileSizeInBytes = 3;
}

message Health {
	HealthState currentState = 1;
	HealthState previousState = 2;
}

enum ValidationStateCode {
	NODE_UNREACHABLE = 0;
	ENTITY_MISSING = 1;
	CLIENT_CREATION_FAILURE = 2;
	FORMAT_INVALID = 3;
	INFO_MISSING = 4;
	INFO_MISMATCH = 5;
}

message ValidationState {
	ValidationStateCode code = 1;
	string message = 2;
	string recommendation = 3;
}

message ValidationStatus {
	repeated ValidationState validationState = 1;
}

message Version {
	string number = 1;
}

message Status {
	Health health = 1;
	ProvisionStatus provisioningStatus = 2;
	Error lastError = 3;
	Version version = 4;
	DownloadStatus downloadStatus = 5;
	ValidationStatus validationStatus = 6;
}

message Entity {
	bool IsPlaceholder = 1; // On a multi-node system, the entity (such as a VM) is created on a node where 
							// IsPlacehoder is false. On all the other nodes, IsPlaceholder is set to true.
							// When an entity moves among these nodes (such as when a VM migrates), the 
							// IsPlacehoder property is updated accordingly on all the nodes.
							// IsPlacehoder therefore defines where the entity (VM) is *not* located.
							// This property is the exact inverse of the node agent's SystemOwned property.
}

message Tag {
	string key = 1;
	string value = 2;
}

message Tags {
	repeated Tag tags = 1;
}

enum ClientType {
	CONTROLPLANE = 0;
	EXTERNALCLIENT = 1;
	NODE = 2;
	ADMIN = 3;
	BAREMETAL = 4;
	LOADBALANCER = 5;
}

enum AuthenticationType {
	SELFSIGNED = 0;
	CASIGNED = 1;
}

enum ProviderType {
	AnyProvider            = 0;
	VirtualMachine         = 1;
	VirtualMachineScaleSet = 2;
	LoadBalancer           = 3;
	VirtualNetwork         = 4;
	VirtualHardDisk        = 5;
	GalleryImage           = 6;
	VirtualMachineImage    = 7;
	NetworkInterface       = 8;
	Certificate            = 9;
	Key                    = 10;
	Secret                 = 11;
	KeyVault               = 12;
	Identity               = 13;
	Role                   = 14;
	RoleAssignment         = 15;
	Kubernetes             = 16;
	Cluster                = 17;
	ControlPlane           = 18;
	Group                  = 19;
	Node                   = 20;
	Location               = 21;
	StorageContainer       = 22;
	StorageFile            = 23;
	StorageDirectory       = 24;
	Subscription           = 25;
	VipPool                = 26;
	MacPool                = 27;
	EtcdCluster            = 28;
	EtcdServer             = 29;
	BareMetalMachine       = 30;
	CredentialMonitor      = 31;
	Logging                = 32;
	Recovery               = 33;
	Debug                  = 34;
	BareMetalHost          = 35;
	Authentication         = 36;
}

extend google.protobuf.FieldOptions {
	bool sensitive = 50001;
}

enum ImageSource {
        LOCAL_SOURCE = 0;
        SFS_SOURCE   = 1;
        HTTP_SOURCE  = 2;
        CLONE_SOURCE = 3;
}

enum HyperVGeneration {
	HyperVGenerationV2 = 0;
	HyperVGenerationV1 = 1;
} 

enum DiskFileFormat {
	DiskFileFormatVHDX =  0;
	DiskFileFormatVHD = 1;
} 

enum CloudInitDataSource {
	NoCloud = 0;
	Azure = 1;
}
