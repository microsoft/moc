// Code generated by protoc-gen-go. DO NOT EDIT.
// source: moc_common_security.proto

package common

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Algorithm int32

const (
	Algorithm_A_UNKNOWN  Algorithm = 0
	Algorithm_RSA15      Algorithm = 1
	Algorithm_RSAOAEP    Algorithm = 2
	Algorithm_RSAOAEP256 Algorithm = 3
	Algorithm_A256KW     Algorithm = 4
)

var Algorithm_name = map[int32]string{
	0: "A_UNKNOWN",
	1: "RSA15",
	2: "RSAOAEP",
	3: "RSAOAEP256",
	4: "A256KW",
}

var Algorithm_value = map[string]int32{
	"A_UNKNOWN":  0,
	"RSA15":      1,
	"RSAOAEP":    2,
	"RSAOAEP256": 3,
	"A256KW":     4,
}

func (x Algorithm) String() string {
	return proto.EnumName(Algorithm_name, int32(x))
}

func (Algorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d3874efde778ac1, []int{0}
}

type KeyOperation int32

const (
	KeyOperation_ENCRYPT   KeyOperation = 0
	KeyOperation_DECRYPT   KeyOperation = 1
	KeyOperation_WRAPKEY   KeyOperation = 2
	KeyOperation_UNWRAPKEY KeyOperation = 3
)

var KeyOperation_name = map[int32]string{
	0: "ENCRYPT",
	1: "DECRYPT",
	2: "WRAPKEY",
	3: "UNWRAPKEY",
}

var KeyOperation_value = map[string]int32{
	"ENCRYPT":   0,
	"DECRYPT":   1,
	"WRAPKEY":   2,
	"UNWRAPKEY": 3,
}

func (x KeyOperation) String() string {
	return proto.EnumName(KeyOperation_name, int32(x))
}

func (KeyOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d3874efde778ac1, []int{1}
}

// https://docs.microsoft.com/en-us/rest/api/keyvault/createkey/createkey#jsonwebkeytype
type JsonWebKeyType int32

const (
	JsonWebKeyType_EC      JsonWebKeyType = 0
	JsonWebKeyType_EC_HSM  JsonWebKeyType = 1
	JsonWebKeyType_RSA     JsonWebKeyType = 2
	JsonWebKeyType_RSA_HSM JsonWebKeyType = 3
	JsonWebKeyType_OCT     JsonWebKeyType = 4
	JsonWebKeyType_AES     JsonWebKeyType = 5
)

var JsonWebKeyType_name = map[int32]string{
	0: "EC",
	1: "EC_HSM",
	2: "RSA",
	3: "RSA_HSM",
	4: "OCT",
	5: "AES",
}

var JsonWebKeyType_value = map[string]int32{
	"EC":      0,
	"EC_HSM":  1,
	"RSA":     2,
	"RSA_HSM": 3,
	"OCT":     4,
	"AES":     5,
}

func (x JsonWebKeyType) String() string {
	return proto.EnumName(JsonWebKeyType_name, int32(x))
}

func (JsonWebKeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d3874efde778ac1, []int{2}
}

type JsonWebKeyCurveName int32

const (
	JsonWebKeyCurveName_P_256  JsonWebKeyCurveName = 0
	JsonWebKeyCurveName_P_256K JsonWebKeyCurveName = 1
	JsonWebKeyCurveName_P_384  JsonWebKeyCurveName = 2
	JsonWebKeyCurveName_P_521  JsonWebKeyCurveName = 3
)

var JsonWebKeyCurveName_name = map[int32]string{
	0: "P_256",
	1: "P_256K",
	2: "P_384",
	3: "P_521",
}

var JsonWebKeyCurveName_value = map[string]int32{
	"P_256":  0,
	"P_256K": 1,
	"P_384":  2,
	"P_521":  3,
}

func (x JsonWebKeyCurveName) String() string {
	return proto.EnumName(JsonWebKeyCurveName_name, int32(x))
}

func (JsonWebKeyCurveName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d3874efde778ac1, []int{3}
}

type KeySize int32

const (
	KeySize_K_UNKNOWN KeySize = 0
	KeySize__256      KeySize = 1
	KeySize__2048     KeySize = 2
	KeySize__3072     KeySize = 3
	KeySize__4096     KeySize = 4
)

var KeySize_name = map[int32]string{
	0: "K_UNKNOWN",
	1: "_256",
	2: "_2048",
	3: "_3072",
	4: "_4096",
}

var KeySize_value = map[string]int32{
	"K_UNKNOWN": 0,
	"_256":      1,
	"_2048":     2,
	"_3072":     3,
	"_4096":     4,
}

func (x KeySize) String() string {
	return proto.EnumName(KeySize_name, int32(x))
}

func (KeySize) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d3874efde778ac1, []int{4}
}

type IdentityOperation int32

const (
	IdentityOperation_REVOKE IdentityOperation = 0
	IdentityOperation_ROTATE IdentityOperation = 1
)

var IdentityOperation_name = map[int32]string{
	0: "REVOKE",
	1: "ROTATE",
}

var IdentityOperation_value = map[string]int32{
	"REVOKE": 0,
	"ROTATE": 1,
}

func (x IdentityOperation) String() string {
	return proto.EnumName(IdentityOperation_name, int32(x))
}

func (IdentityOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d3874efde778ac1, []int{5}
}

type IdentityCertificateOperation int32

const (
	IdentityCertificateOperation_CREATE_CERTIFICATE IdentityCertificateOperation = 0
	IdentityCertificateOperation_RENEW_CERTIFICATE  IdentityCertificateOperation = 1
)

var IdentityCertificateOperation_name = map[int32]string{
	0: "CREATE_CERTIFICATE",
	1: "RENEW_CERTIFICATE",
}

var IdentityCertificateOperation_value = map[string]int32{
	"CREATE_CERTIFICATE": 0,
	"RENEW_CERTIFICATE":  1,
}

func (x IdentityCertificateOperation) String() string {
	return proto.EnumName(IdentityCertificateOperation_name, int32(x))
}

func (IdentityCertificateOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d3874efde778ac1, []int{6}
}

func init() {
	proto.RegisterEnum("moc.Algorithm", Algorithm_name, Algorithm_value)
	proto.RegisterEnum("moc.KeyOperation", KeyOperation_name, KeyOperation_value)
	proto.RegisterEnum("moc.JsonWebKeyType", JsonWebKeyType_name, JsonWebKeyType_value)
	proto.RegisterEnum("moc.JsonWebKeyCurveName", JsonWebKeyCurveName_name, JsonWebKeyCurveName_value)
	proto.RegisterEnum("moc.KeySize", KeySize_name, KeySize_value)
	proto.RegisterEnum("moc.IdentityOperation", IdentityOperation_name, IdentityOperation_value)
	proto.RegisterEnum("moc.IdentityCertificateOperation", IdentityCertificateOperation_name, IdentityCertificateOperation_value)
}

func init() { proto.RegisterFile("moc_common_security.proto", fileDescriptor_0d3874efde778ac1) }

var fileDescriptor_0d3874efde778ac1 = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x52, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x6d, 0x92, 0xae, 0xa3, 0x17, 0x98, 0xee, 0x8c, 0x40, 0x42, 0xe2, 0x0d, 0xf1, 0x12, 0xa4,
	0xb5, 0x4b, 0x3f, 0x18, 0x8f, 0x9e, 0x67, 0x44, 0x09, 0x4b, 0x2a, 0x27, 0x23, 0x1a, 0x2f, 0x51,
	0x1b, 0xbc, 0xcd, 0x12, 0xae, 0xab, 0xd4, 0x45, 0x0a, 0xbf, 0x1e, 0x39, 0xd9, 0xb4, 0xf1, 0x76,
	0xce, 0x91, 0xcf, 0xf1, 0xb9, 0x57, 0x17, 0xde, 0x6a, 0x53, 0x95, 0x95, 0xd1, 0xda, 0x6c, 0xca,
	0x9d, 0xac, 0xf6, 0xb5, 0xb2, 0xcd, 0xc9, 0xb6, 0x36, 0xd6, 0x90, 0x40, 0x9b, 0x2a, 0x4c, 0x60,
	0x48, 0x7f, 0xdf, 0x9a, 0x5a, 0xd9, 0x3b, 0x4d, 0x5e, 0xc2, 0x90, 0x96, 0x57, 0x49, 0x9c, 0xa4,
	0x45, 0x82, 0x3d, 0x32, 0x84, 0x03, 0x91, 0xd1, 0xd3, 0x19, 0x7a, 0xe4, 0x39, 0x1c, 0x8a, 0x8c,
	0xa6, 0x94, 0x2f, 0xd1, 0x27, 0x47, 0x00, 0xf7, 0x24, 0x9a, 0xcd, 0x31, 0x20, 0x00, 0x03, 0x1a,
	0xcd, 0xe6, 0x71, 0x81, 0xfd, 0xf0, 0x02, 0x5e, 0xc4, 0xb2, 0x49, 0xb7, 0xb2, 0x5e, 0x59, 0x65,
	0x36, 0xce, 0xc8, 0x13, 0x26, 0xae, 0x97, 0x39, 0xf6, 0x1c, 0xb9, 0xe0, 0x1d, 0x69, 0x23, 0x0b,
	0x41, 0x97, 0x31, 0xbf, 0x46, 0xdf, 0xfd, 0x7c, 0x95, 0x3c, 0xd0, 0x20, 0xfc, 0x0e, 0x47, 0xdf,
	0x76, 0x66, 0x53, 0xc8, 0x75, 0x2c, 0x9b, 0xbc, 0xd9, 0x4a, 0x32, 0x00, 0x9f, 0x33, 0xec, 0xb9,
	0xbf, 0x38, 0x2b, 0xbf, 0x66, 0x97, 0xe8, 0x91, 0x43, 0x08, 0x44, 0x46, 0xd1, 0xbf, 0x6f, 0xd7,
	0xaa, 0x81, 0x53, 0x53, 0x96, 0x63, 0xdf, 0x01, 0xca, 0x33, 0x3c, 0x08, 0xcf, 0xe1, 0xd5, 0x63,
	0x1a, 0xdb, 0xd7, 0x7f, 0x64, 0xb2, 0xd2, 0xd2, 0x8d, 0xb7, 0x2c, 0xdd, 0x04, 0x6d, 0x6a, 0x0b,
	0x63, 0xf4, 0x3a, 0x79, 0x72, 0x36, 0x45, 0xbf, 0x83, 0xb3, 0xe8, 0x14, 0x83, 0x90, 0xc1, 0x61,
	0x2c, 0x9b, 0x4c, 0xfd, 0x95, 0xae, 0x6b, 0xfc, 0x64, 0x4b, 0xcf, 0xa0, 0xdf, 0xa6, 0xb4, 0xce,
	0x32, 0x1a, 0x4f, 0xcf, 0x3a, 0x67, 0x39, 0x19, 0x7f, 0x8a, 0x30, 0x68, 0xe1, 0x74, 0xfc, 0x79,
	0x8e, 0xfd, 0xf0, 0x23, 0x1c, 0x2f, 0x7e, 0xc9, 0x8d, 0x55, 0xf6, 0xc9, 0x86, 0x00, 0x06, 0x82,
	0xff, 0x48, 0x63, 0xde, 0xf5, 0x10, 0x69, 0x4e, 0x73, 0x8e, 0x5e, 0x78, 0x09, 0xef, 0x1e, 0x1e,
	0x33, 0x59, 0x5b, 0x75, 0xa3, 0xaa, 0x95, 0x95, 0x8f, 0xbe, 0x37, 0x40, 0x98, 0xe0, 0x34, 0xe7,
	0x25, 0xe3, 0x22, 0x5f, 0x7c, 0x59, 0x30, 0xe7, 0xeb, 0x91, 0xd7, 0x70, 0x2c, 0x78, 0xc2, 0x8b,
	0xff, 0x64, 0xef, 0xfc, 0xc3, 0xcf, 0xf7, 0xb7, 0xca, 0xde, 0xed, 0xd7, 0x27, 0x95, 0xd1, 0x23,
	0xad, 0xaa, 0xda, 0xec, 0xcc, 0x8d, 0x1d, 0x69, 0x53, 0x8d, 0xea, 0x6d, 0x35, 0xea, 0x6e, 0x64,
	0x3d, 0x68, 0x6f, 0x63, 0xf2, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x65, 0x46, 0x23, 0xff, 0x38, 0x02,
	0x00, 0x00,
}
