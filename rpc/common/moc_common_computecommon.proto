// Copyright (c) Microsoft Corporation.
// Licensed under the Apache v2.0 license.

syntax = "proto3";
option go_package = "github.com/microsoft/moc/rpc/common";

package moc;
import "google/protobuf/descriptor.proto";

enum UserType {
	ROOT = 0;
	USER = 1;
}

enum ProcessorType {
	None = 0;
	Intel = 1;
	Intel64 = 2;
	AMD = 3;
	AMD64 = 4;
	ARM = 5;
	ARM64 = 6;
}

enum OperatingSystemBootstrapEngine {
	CLOUD_INIT = 0; // For both cloud-init and cloudbase-init
	WINDOWS_ANSWER_FILES = 1;
}

enum OperatingSystemType {
	WINDOWS = 0;
	LINUX = 1;
}

enum VirtualMachineSizeType {
	Default = 0;
	Standard_A2_v2 = 2;
	Standard_A4_v2 = 3;
	Standard_D2s_v3 = 4;
	Standard_D4s_v3 = 5;
	Standard_D8s_v3 = 6;
	Standard_D16s_v3 = 7;
	Standard_D32s_v3 = 8;
	Standard_DS2_v2 = 9;
	Standard_DS3_v2 = 10;
	Standard_DS4_v2 = 11;
	Standard_DS5_v2 = 12;
	Standard_DS13_v2 = 13;
	Standard_K8S_v1 = 14;
	Standard_K8S2_v1 = 15;
	Standard_K8S3_v1 = 16;
	Standard_K8S4_v1 = 17;
	Standard_NK6 = 18;
	Standard_NK12 = 19;
	Standard_NV6 = 20;
	Standard_NV12 = 21;
	Standard_K8S5_v1 = 22;
	Standard_DS2_v2_HPN = 23;
	Standard_DS3_v2_HPN = 24;
	Standard_DS4_v2_HPN = 25;
	Standard_F2s_HPN = 26;
	Standard_F4s_HPN = 27;
	Standard_F8s_HPN = 28;
	Standard_F16s_HPN = 29;
	Standard_NC4_A2 = 30;
	Standard_NC8_A2 = 31;
	Standard_NC16_A2 = 32;
	Standard_NC32_A2 = 33;
	Standard_NC4_A30 = 34;
	Standard_NC8_A30 = 35;
	Standard_NC16_A30 = 36;
	Standard_NC32_A30 = 37;
	Standard_NC4_A100_40 = 38;
	Standard_NC8_A100_40 = 39;
	Standard_NC16_A100_40 = 40;
	Standard_NC32_A100_40 = 41;
	Standard_NC4_A100_80 = 42;
	Standard_NC8_A100_80 = 43;
	Standard_NC16_A100_80 = 44;
	Standard_NC32_A100_80 = 45;
	Standard_NC4_A16 = 46;
	Standard_NC8_A16 = 47;
	Standard_NC16_A16 = 48;
	Standard_NC32_A16 = 49;
	Standard_NC24_H100 = 50;
	Standard_NC48_H100 = 51;
	Standard_NC80_H100 = 52;
	Standard_NC96_H100 = 53;
	Custom_A2 = 95;
	Custom_NK = 96;
	Custom_Gpupv = 97;
	Custom = 98;
	Unsupported = 99;
}

enum WinRMProtocolType {
	HTTP = 0;
	HTTPS = 1;
}

message WinRMListener {
	WinRMProtocolType Protocol = 1;
}

message WinRMConfiguration {
	repeated WinRMListener Listeners = 1;
}

enum AssignmentType {
	GpuDDA = 0;
	GpuP = 1;
	GpuPV = 2;
	GpuDefault = 3; // default is used when customer do not pass GPU Assign Type and moc will decide the assign type based on the underlying configuration.
}

message VirtualMachineGPU {
	AssignmentType assignment = 1;
	uint64 partitionSizeMB = 2;
	string name = 3;
}

message VirtualMachineCustomSize {
	reserved 4;
	int32 cpuCount = 1;
	int32 memoryMB = 2;
	int32 gpuCount = 3;
}

message DynamicMemoryConfiguration {
	uint64 maximumMemoryMB = 1;
	uint64 minimumMemoryMB = 2;
	uint32 targetMemoryBuffer = 3;
}

enum PowerState {
	Unknown = 0;
	Running = 1 ;
	Off = 2;
	Paused = 3;
	Critical = 4;
	Saved = 5;
}

enum VirtualMachineOperation {
	START = 0;
	STOP = 1;
	RESET = 2;
	REPAIR_GUEST_AGENT = 3;
	PAUSE = 4;
	SAVE = 5;
}

enum VirtualMachineRunCommandExecutionState {
	ExecutionState_UNKNOWN = 0;
	ExecutionState_FAILED = 1;
	ExecutionState_SUCCEEDED = 2;
	ExecutionState_PENDING = 3;
	ExecutionState_REBOOTING = 4;
}

message VirtualMachineRunCommandInputParameter {
    string Name = 1;
    string Value = 2 [(sensitivejson) = true];
}

message VirtualMachineRunCommandScriptSource {
	string Script = 1 [(sensitivecompute) = true];
	string ScriptURI = 2;
	string CommandID = 3;
}

message VirtualMachineRunCommandInstanceView {
	VirtualMachineRunCommandExecutionState ExecutionState = 1;
	int32 ExitCode = 2;
	string Output = 3;
	string Error = 4;
}

enum ConfidentialVMHardwareType {
	HardwareTypeNone = 0;
	HardwareTypeSEVSNP = 1;
}

// describes the the capabilities of this node in terms of what type of VM can be created
message VirtualMachineCapabilities {
	bool IsolatedVmCapable =  1;
	ConfidentialVMHardwareType ConfidentialVMHardwareCapability = 2;
}

message InstanceViewStatus {
	enum StatusLevelType {
		Unknown = 0;
		Info = 1 ;
		Warning = 2;
		Error = 3;
	}

	string code = 1;
	StatusLevelType level = 2;
	string displayStatus = 3;
	string message = 4;
	string time = 5;
}

message VirtualMachineAgentInstanceView {
	string vmAgentVersion = 1;
	repeated InstanceViewStatus statuses = 2;
}

message GuestAgentConfiguration {
	bool enabled = 1;
}

/* Values fetched from Win32_Processor class.
Documentation here:
https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-processor#properties */

enum Architecture {
	x86 = 0;
	MIPS = 1;
	Alpha = 2;
	PowerPC = 3;
	ARM_Architecture = 5;
	ia64 = 6;
	x64 = 9;
	ARM64_Architecture = 12;
}

extend google.protobuf.FieldOptions {
	bool sensitivecompute = 50002;
	bool sensitivejson = 50003;
}

enum SecurityType {
        NOTCONFIGURED = 0;
        TRUSTEDLAUNCH = 1;
        CONFIDENTIALVM = 2;
}

enum SecurityEncryptionTypes {
    SecurityEncryptionNone = 0;
    NonPersistedTPM = 1;
}

message VMDiskSecurityProfile {
    SecurityEncryptionTypes securityEncryptionType = 1;
}

message VirtualMachineManagedDiskParameters {
    VMDiskSecurityProfile securityProfile = 1;
}

message ProxyConfiguration {
	string httpProxy = 1 [(sensitivecompute) = true];
	string httpsProxy = 2 [(sensitivecompute) = true];
	repeated string noProxy = 3;
	string trustedCa = 4 [(sensitivecompute) = true];
}
