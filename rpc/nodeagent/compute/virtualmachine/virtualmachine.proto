// Copyright (c) Microsoft Corporation.
// Licensed under the Apache v2.0 license.

syntax = "proto3";
option go_package = "github.com/microsoft/moc/rpc/nodeagent/compute";

package moc.nodeagent.compute;
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "common.proto";
import "computecommon.proto";
import "notification.proto";

message VirtualMachineRequest {
	repeated VirtualMachine VirtualMachineSystems = 1;
	Operation OperationType = 2;
}

message VirtualMachineResponse {
	repeated VirtualMachine VirtualMachineSystems = 1;
	google.protobuf.BoolValue Result = 2;
	string  Error = 3;
}

message SSHPublicKey {
	string keydata = 1;
}

message Disk {
	// reference to the virtual hard disk managed by storage
	string diskname = 1;
}

message StorageConfiguration {
	Disk osdisk = 1;
	repeated Disk datadisks = 2;
	string vmConfigContainerName = 3; // Name of the storage container that hosts the VM configuration file 
}

message NetworkInterface {
	// reference to network interface managed by network
	string networkInterfaceName = 1;
}

message NetworkConfiguration {
	repeated NetworkInterface interfaces = 1;
}

message UserConfiguration {
	string username = 1;
	string password = 2;
	UserType usertype = 3;
}

message OperatingSystemConfiguration {
	string computerName = 1;
	UserConfiguration administrator = 2;
	repeated UserConfiguration users = 3;
	string customData = 4;
	repeated SSHPublicKey publickeys = 5;
	OperatingSystemType ostype = 6;
}

message HardwareConfiguration {
	VirtualMachineSizeType VMSize = 1;
}

message SecurityConfiguration {
	bool enableTPM = 1;
}

message VirtualMachine {
	string name = 1;
	string id = 2;
	StorageConfiguration storage = 3;
	OperatingSystemConfiguration os = 4;
	NetworkConfiguration network = 5;
	HardwareConfiguration hardware = 6;
	Status status = 7;
	bool disableHighAvailability = 8;
	repeated string allowedOwnerNodes = 9;
	PowerState powerState = 10;
	SecurityConfiguration security = 11;
	Entity entity = 12;
	HighAvailabilityState highAvailabilityState = 13;
	Tags tags = 14;
}

message VirtualMachineOperationRequest {
	repeated VirtualMachine VirtualMachines = 1;
	VirtualMachineOperation OperationType = 2;
}

message VirtualMachineOperationResponse {
	repeated VirtualMachine VirtualMachines = 1;
	google.protobuf.BoolValue Result = 2;
	string  Error = 3;
}


service VirtualMachineAgent {
	rpc Invoke(VirtualMachineRequest) returns (VirtualMachineResponse) {}
	rpc Operate(VirtualMachineOperationRequest) returns (VirtualMachineOperationResponse) {}
	rpc CheckNotification(google.protobuf.Empty) returns (NotificationResponse) {}
}

